CCS PCM C Compiler, Version 5.025, 26966               04-Jul-24 05:03

               Filename:   E:\1. Phenikaa University\AML\1. Code\VDK (PIC16)\0. BTL\1. Code\V1\main.lst

               ROM used:   95 words (1%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           23 (6%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
....................  
.................... #list 
....................  
.................... // #include <lcd_i2c.c> 
.................... #device ADC = 8 
....................  
.................... #FUSES NOWDT      // No Watch Dog Timer 
.................... #FUSES HS         // High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... // #FUSES NOPUT      // No Power Up Timer 
.................... #FUSES NOBROWNOUT // No brownout reset 
.................... #FUSES NOLVP      // No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal = 12000000) 
0004:  MOVLW  31
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  03
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  E3
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  NOP
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
....................  
....................  
.................... // #use rs232(baud = 9600, parity = N, xmit = PIN_C6, rcv = PIN_C7, bits = 8, stream = PORT1) 
.................... // #use i2c(Master, Fast, sda = PIN_C3, scl = PIN_C4) 
....................  
....................  
.................... #define LCD_ADDR 0x4E		 //             0x4E        //I2C slave address for LCD module 
.................... byte lcd_total_rows = 2;	 //       2           //Number of rows: 1,2,3 or 4 
.................... byte lcd_total_columns = 20; //    16          //Number of columns: 1...20 
....................  
.................... #define RS 0b00000001			 // P0 - PCF8574T Pin connected to RS 
.................... #define RW 0b00000010			 // P1 - PCF8574T Pin connected to RW 
.................... #define ENABLE 0b00000100		 // P2 - PCF8574T Pin connected to EN 
.................... #define LCD_BACKLIGHT 0b00001000 // P3 - PCF8574T Pin connected to BACKLIGHT LED 
....................  
.................... #define addr_row_one 0x00	// LCD RAM address for row 1 
.................... #define addr_row_two 0x40	// LCD RAM address for row 2 
.................... #define addr_row_three 0x14 // LCD RAM address for row 3 
.................... #define addr_row_four 0x54	// LCD RAM address for row 4 
....................  
.................... #define ON 1 
.................... #define OFF 0 
.................... #define NOT ~ 
.................... #define data_shifted data << 4 
....................  
.................... int8 new_row_request = 1, BACKLIGHT_LED = LCD_BACKLIGHT; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // void lcd_backlight_led(byte bl) 
.................... // { 
.................... // 	If(bl) BACKLIGHT_LED = LCD_BACKLIGHT; 
.................... // 	else BACKLIGHT_LED = OFF; 
.................... // } 
....................  
.................... // void i2c_send_nibble(byte data, byte type) 
.................... // { 
.................... // 	switch (type) 
.................... // 	{ 
.................... // 	case 0: 
.................... // 		i2c_write(data_shifted | BACKLIGHT_LED); 
.................... // 		delay_cycles(1); 
.................... // 		i2c_write(data_shifted | ENABLE | BACKLIGHT_LED); 
.................... // 		delay_us(2); 
.................... // 		i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED); 
.................... // 		break; 
....................  
.................... // 	case 1: 
.................... // 		i2c_write(data_shifted | RS | BACKLIGHT_LED); 
.................... // 		delay_cycles(1); 
.................... // 		i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED); 
.................... // 		delay_us(2); 
.................... // 		i2c_write(data_shifted | RS | BACKLIGHT_LED); 
.................... // 		break; 
.................... // 	} 
.................... // } 
....................  
.................... // void lcd_send_byte(byte data, byte type) 
.................... // { 
.................... // 	i2c_start(); 
.................... // 	i2c_write(LCD_ADDR); 
.................... // 	i2c_send_nibble(data >> 4, type);  
.................... // 	i2c_send_nibble(data & 0xf, type); 
.................... // 	i2c_stop(); 
.................... // } 
....................  
.................... // void lcd_clear() 
.................... // { 
.................... // 	lcd_send_byte(0x01, 0); 
.................... // 	delay_ms(2); 
.................... // 	new_row_request = 1; 
.................... // } 
....................  
.................... // void lcd_init() // byte ADDR,...byte col, byte row 
.................... // { 
.................... // 	byte i; 
.................... // 	byte CONST lcd_type = 2;											 // 0=5x7, 1=5x10, 2=2 lines 
.................... // 	byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................  
.................... // 	BACKLIGHT_LED = LCD_BACKLIGHT; 
.................... // 	// LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module 
.................... // 	// lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4 
.................... // 	// lcd_total_columns= col ; 
.................... // 	disable_interrupts(GLOBAL); 
.................... // 	delay_ms(50); // LCD power up delay 
....................  
.................... // 	i2c_start(); 
.................... // 	i2c_write(LCD_ADDR); 
.................... // 	i2c_send_nibble(0x00, 0); 
.................... // 	delay_ms(15); 
....................  
.................... // 	for (i = 1; i <= 3; ++i) 
.................... // 	{ 
.................... // 		i2c_send_nibble(0x03, 0); 
.................... // 		delay_ms(5); 
.................... // 	} 
.................... // 	i2c_send_nibble(0x02, 0); 
.................... // 	delay_ms(5); 
.................... // 	i2c_stop(); 
....................  
.................... // 	for (i = 0; i <= 3; ++i) 
.................... // 	{ 
.................... // 		lcd_send_byte(LCD_INIT_STRING[i], 0); 
.................... // 		delay_ms(5); 
.................... // 	} 
.................... // 	lcd_clear(); // Clear Display 
.................... // 	enable_interrupts(GLOBAL); 
.................... // } 
....................  
.................... // void lcd_gotoxy(byte x, byte y) 
.................... // { 
.................... // 	byte row, column, row_addr, lcd_address; 
.................... // 	// static char data; 
....................  
.................... // 	if (y > lcd_total_rows) 
.................... // 		row = lcd_total_rows; 
.................... // 	else 
.................... // 		row = y; 
....................  
.................... // 	switch (row) 
.................... // 	{ 
.................... // 	case 1: 
.................... // 		row_addr = addr_row_one; 
.................... // 		break; 
.................... // 	case 2: 
.................... // 		row_addr = addr_row_two; 
.................... // 		break; 
.................... // 	case 3: 
.................... // 		row_addr = addr_row_three; 
.................... // 		break; 
.................... // 	case 4: 
.................... // 		row_addr = addr_row_four; 
.................... // 		break; 
.................... // 	default: 
.................... // 		row_addr = addr_row_one; 
.................... // 		break; 
.................... // 	} 
....................  
.................... // 	if (x > lcd_total_columns) 
.................... // 		column = lcd_total_columns; 
.................... // 	else 
.................... // 		column = x; 
.................... // 	lcd_address = (row_addr + (column - 1)); 
.................... // 	lcd_send_byte(0x80 | lcd_address, 0); 
.................... // } 
....................  
.................... // // Display the character on LCD screen. 
.................... // void lcd_putc(char in_data) 
.................... // { 
....................  
.................... // 	switch (in_data) 
.................... // 	{ 
....................  
.................... // 	case '\f': 
.................... // 		lcd_clear(); 
.................... // 		break; 
....................  
.................... // 	case '\n': 
.................... // 		new_row_request++; 
.................... // 		if (new_row_request > lcd_total_rows) 
.................... // 			new_row_request = 1; 
.................... // 		lcd_gotoxy(1, new_row_request); 
....................  
.................... // 		break; 
....................  
.................... // 	case '\b': 
.................... // 		lcd_send_byte(0x10, 0); 
.................... // 		break; 
....................  
.................... // 	default: 
.................... // 		lcd_send_byte(in_data, 1); 
.................... // 		break; 
.................... // 	} 
.................... // } 
.................... /////////////////////////////  I2C  ///////////////////////////////////////// 
....................  
.................... int8 SW_Pin[] = {Pin_B0, Pin_B1, Pin_B2, Pin_B3, Pin_B4}; 
*
0038:  MOVLW  30
0039:  BCF    03.5
003A:  MOVWF  24
003B:  MOVLW  31
003C:  MOVWF  25
003D:  MOVLW  32
003E:  MOVWF  26
003F:  MOVLW  33
0040:  MOVWF  27
0041:  MOVLW  34
0042:  MOVWF  28
.................... int8 SW0 = Pin_B0; 
.................... int8 SW1 = Pin_B1; 
.................... int8 SW2 = Pin_B2; 
.................... int8 SW3 = Pin_B3; 
.................... int8 SW4 = Pin_B4; 
....................  
.................... int8 LED_Pin = Pin_D0; 
.................... int8 Buzzer_Pin = Pin_D1; 
....................  
....................  
....................  
.................... void main() 
*
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  MOVLW  02
001D:  MOVWF  20
001E:  MOVLW  14
001F:  MOVWF  21
0020:  MOVLW  01
0021:  MOVWF  22
0022:  MOVLW  08
0023:  MOVWF  23
0024:  MOVLW  30
0025:  MOVWF  29
0026:  MOVLW  31
0027:  MOVWF  2A
0028:  MOVLW  32
0029:  MOVWF  2B
002A:  MOVLW  33
002B:  MOVWF  2C
002C:  MOVLW  34
002D:  MOVWF  2D
002E:  MOVLW  40
002F:  MOVWF  2E
0030:  MOVLW  41
0031:  MOVWF  2F
0032:  BSF    03.5
0033:  BSF    1F.0
0034:  BSF    1F.1
0035:  BSF    1F.2
0036:  BCF    1F.3
0037:  BCF    03.7
.................... { 
.................... 	// lcd_init();	 // khoi dong lcd 
.................... 	// lcd_clear(); // xoa man hinh lcd 
....................  
.................... 	// lcd_gotoxy(1, 1); 
.................... 	// printf(lcd_putc, "LCD-I2C!!!"); 
....................  
.................... 	// led and buzzer pin output 
.................... 	set_tris_d(0x00); 
*
0043:  MOVLW  00
0044:  BSF    03.5
0045:  MOVWF  08
....................  
.................... 	while(TRUE) 
.................... 	{ 
.................... 		// lcd_clear(); // xoa man hinh lcd 
....................  
.................... 		// lcd_gotoxy(1, 1); 
.................... 		// printf(lcd_putc, "LCD-I2C!!!"); 
.................... 		// delay_ms(1000); 
....................  
.................... 		// output_low(LED_Pin); 
.................... 		// output_low(Buzzer_Pin); 
.................... 		output_d(0x00); 
0046:  CLRF   08
0047:  BCF    03.5
0048:  CLRF   08
....................  
.................... 		delay_ms(1000); 
0049:  MOVLW  04
004A:  MOVWF  30
004B:  MOVLW  FA
004C:  MOVWF  31
004D:  CALL   004
004E:  DECFSZ 30,F
004F:  GOTO   04B
....................  
.................... 		// output_high(LED_Pin); 
.................... 		// output_high(Buzzer_Pin); 
....................  
.................... 		output_d(0xFF); 
0050:  BSF    03.5
0051:  CLRF   08
0052:  MOVLW  FF
0053:  BCF    03.5
0054:  MOVWF  08
....................  
.................... 		delay_ms(1000); 
0055:  MOVLW  04
0056:  MOVWF  30
0057:  MOVLW  FA
0058:  MOVWF  31
0059:  CALL   004
005A:  DECFSZ 30,F
005B:  GOTO   057
005C:  BSF    03.5
005D:  GOTO   046
.................... 	} 
....................  
.................... } 
005E:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
